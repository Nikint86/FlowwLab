import os
import sys
import django
from django.conf import settings

# –î–æ–±–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()


import os
import random

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv
from bot.models import Bouquet


# –ó–∞–≥–ª—É—à–∫–∞ "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" –±—É–∫–µ—Ç–æ–≤
BOUQUETS_DB = {
    "–ë–µ–ª—ã–π": {
        "~500": {
            "photo": "https://violetflowers.ru/upload/resize_cache/iblock/210/800_800_1445b4302703fbf0bc9433e7bed9bfe3d/210b4d1c9970e1fcdd65812bbac7b7c8.jpeg",
            "name": "–ù–µ–∂–Ω–æ—Å—Ç—å",
            "composition": "5 –±–µ–ª—ã—Ö —Ä–æ–∑, –≥–∏–ø—Å–æ—Ñ–∏–ª–∞",
            "price": "500 —Ä—É–±."
        },
        "~1000": {
            "photo": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRBOg1pSSompNpXp8C0nvbUzFDpNWCoGq_PMQ&s",
            "name": "–°–Ω–µ–∂–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞",
            "composition": "15 –±–µ–ª—ã—Ö —Ä–æ–∑, —ç–≤–∫–∞–ª–∏–ø—Ç",
            "price": "1000 —Ä—É–±."
        }
    },
    "–†–æ–∑–æ–≤—ã–π": {
        "~1000": {
            "photo": "https://www.beauty-flowers-moscow.ru/wp-content/uploads/2017/12/11-rozovyh-pionov-v-rozovoj-upakovke.jpg",
            "name": "–†–æ–∑–æ–≤—ã–µ –º–µ—á—Ç—ã",
            "composition": "11 —Ä–æ–∑–æ–≤—ã—Ö —Ä–æ–∑, –ø–∏–æ–Ω—ã",
            "price": "1000 —Ä—É–±."
        }
    }
}


def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ."""
    user = update.effective_user
    context.user_data.clear()
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. ‚úÖ\n"
        "–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?"
    )
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(welcome_text, reply_markup=reply_markup)
    context.user_data['step'] = 'consent'


def handle_consent(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"."""
    user_response = update.message.text
    if user_response == "–î–∞":
        context.user_data['consent_given'] = True
        context.user_data['step'] = 'occasion_choice'
        occasions = ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–®–∫–æ–ª–∞", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
        keyboard = [[KeyboardButton(occasion)] for occasion in occasions]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:",
            reply_markup=reply_markup
        )
    elif user_response == "–ù–µ—Ç":
        update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üëã",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear() # –º–æ–∂–Ω–æ –∏ –±–µ–∑ —ç—Ç–æ–≥–æ - –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


def handle_occasion_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–≤–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞."""
    occasion = update.message.text
    context.user_data['occasion'] = occasion
    context.user_data['step'] = 'color_choice'

    if occasion == "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥":
        update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–≤–æ–¥?")
    else:
        colors = Bouquet.objects.values_list('color', flat=True).distinct()
        keyboard = [[KeyboardButton(color)] for color in colors]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–∫–µ—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
            reply_markup=reply_markup
        )


def handle_color_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É."""
    color = update.message.text
    context.user_data['color'] = color
    context.user_data['step'] = 'price_choice'

    prices = list(Bouquet.objects.values_list('price_category', flat=True).distinct())
    keyboard = [[KeyboardButton(price)] for price in prices]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=reply_markup
    )


def handle_price_choice(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç '–ù—Ä–∞–≤–∏—Ç—Å—è?'"""
    price_category = update.message.text
    color = context.user_data['color']
    bouquet = Bouquet.objects.filter(color=color,
                                     price_category=price_category).order_by('?').first()

    context.user_data['step'] = 'review'

    if not bouquet:
        update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üò¢\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (/start)",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    context.user_data['selected_bouquet'] = bouquet

    caption = (
        f"üíê *{bouquet.title}*\n"
        f"üé® –¶–≤–µ—Ç: {bouquet.color}\n"
        f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n"
        f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n\n"
        "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
    )

    with open(bouquet.photo.path, 'rb') as image:
        update.message.reply_photo(
            photo=InputFile(image),
            caption=caption,
            parse_mode="Markdown"
        )
    
    keyboard = [[KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è"), KeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


def handle_review(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç '–ù—Ä–∞–≤–∏—Ç—Å—è?'"""
    response = update.message.text
    bouquet = context.user_data.get('selected_bouquet')

    if not bouquet:
        return start(update, context)

    if response == "–ù—Ä–∞–≤–∏—Ç—Å—è":
        context.user_data['step'] = 'get_name'
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=ReplyKeyboardRemove()
        )
    elif response == "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è":
        keyboard = [[KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")], [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "**–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?**\n\n"
            "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞:",
            reply_markup=reply_markup
        )
        context.user_data['step'] = 'dislike_options'

        # context.user_data['step'] = '?' –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –Ω–æ–≤—ã–π –±—É–∫–µ—Ç
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–ù—Ä–∞–≤–∏—Ç—Å—è' –∏–ª–∏ '–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è'")


def handle_dislike_options(update: Update, context: CallbackContext):
    choice = update.message.text
    if choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç":
        bouquets = list(Bouquet.objects.all()) # –≤—Å–µ –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–µ–±–æ—Ä, –Ω–æ —Ö–∑
        if not bouquets:
            update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        bouquet = random.choice(bouquets)
        context.user_data['selected_bouquet'] = bouquet
        context.user_data['step'] = 'review'

        caption = (
            f"üíê *{bouquet.title}*\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
            f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n\n"
            "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
        )

        with open(bouquet.photo.path, 'rb') as image:
            update.message.reply_photo(
                photo=InputFile(image),
                caption=caption,
                parse_mode="Markdown"
            )

        keyboard = [[KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è"),
                     KeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]]
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
                                  reply_markup=ReplyKeyboardMarkup(keyboard,
                                                                   resize_keyboard=True))

    elif choice == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        context.user_data['step'] = 'get_phone'


def handle_get_phone(update: Update, context: CallbackContext):
    phone = update.message.text
    # florist_id = 987654321  # –Ω—É–∂–µ–Ω –∞–π–¥–∏ - –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞

    # context.bot.send_message(
    #     chat_id=florist_id,
    #     text=f"üìû –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n–ù–æ–º–µ—Ä: {phone}"
    # )

    update.message.reply_text(
        "–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ üëá"
    )

    # –ü–æ–∫–∞–∂–µ–º –±—É–∫–µ—Ç
    bouquets = list(Bouquet.objects.all()) # –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –Ω–µ all –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if bouquets:
        bouquet = random.choice(bouquets)

        context.user_data['selected_bouquet'] = bouquet

        caption = (
            f"üíê *{bouquet.title}*\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
            f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n\n"
            "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
        )

        with open(bouquet.photo.path, 'rb') as image:
            update.message.reply_photo(
                photo=InputFile(image),
                caption=caption,
                parse_mode="Markdown"
            )

        keyboard = [[KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è"),
                     KeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]]
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
                                  reply_markup=ReplyKeyboardMarkup(keyboard,
                                                                   resize_keyboard=True))


def handle_name_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û"""
    name = update.message.text
    # –ú–∏–∫—Ä–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if len(name.split()) < 2:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)")
        return
    context.user_data['name'] = name
    context.user_data['step'] = 'get_address'
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):"
    )


def handle_address_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞"""
    address = update.message.text
    context.user_data['address'] = address
    context.user_data['step'] = 'get_date'
    keyboard = [
        [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )


def handle_date_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã"""
    date = update.message.text
    context.user_data['delivery_date'] = date
    context.user_data['step'] = 'get_time'

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    keyboard = [
        [KeyboardButton("10:00-12:00"), KeyboardButton("12:00-14:00")],
        [KeyboardButton("14:00-16:00"), KeyboardButton("16:00-18:00")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )


def handle_time_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑"""
    time = update.message.text
    context.user_data['delivery_time'] = time
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    bouquet = context.user_data['selected_bouquet']
    order_summary = (
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üíê –ë—É–∫–µ—Ç: {bouquet.title}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {bouquet.price} —Ä—É–±.\n"
        f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {context.user_data['name']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
        f"üìÖ –î–∞—Ç–∞: {context.user_data['delivery_date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ü•∞ –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä."
    )

    with open(bouquet.photo.path, 'rb') as image:
        update.message.reply_photo(
            photo=InputFile(image),
            caption=order_summary
        )

    update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! üíê",
                              reply_markup=ReplyKeyboardRemove())
    # notify_courier(context.bot, bouquet, order_summary)
    # courier_id = os.getenv("COURIER_ID")
    # with open(bouquet.photo.path, 'rb') as image:
    #     context.bot.send_photo(
    #         chat_id=courier_id,
    #         photo=InputFile(image),
    #         caption=order_summary
    #     ) -- –Ω–∞–≤–µ—Ä–Ω–æ–µ —Å—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é notify_courier –∏ –∑–∞–∏–º–µ—Ç—å —á–∞—Ç –∞–π–¥–∏ 
    # context.user_data.clear()
    # context.user_data['step'] = 'order_complete'


def notify_courier(bot, bouquet, order_summary):
    courier_id = os.getenv("COURIER_ID")
    if not courier_id:
        return  # –º–æ–∂–Ω–æ –ª–æ–≥–≥–µ—Ä –¥–æ–±–∞–≤–∏—Ç—å
    with open(bouquet.photo.path, 'rb') as image:
        bot.send_photo(
            chat_id=courier_id,
            photo=InputFile(image),
            caption=order_summary
        )


def route_message(update: Update, context: CallbackContext):
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π."""
    step = context.user_data.get('step')
    text = update.message.text  # –¥–ª—è –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞

    if step == 'consent':
        handle_consent(update, context)
    elif step == 'occasion_choice':
        handle_occasion_choice(update, context)
    elif step == 'color_choice':
        handle_color_choice(update, context)
    elif step == 'price_choice':
        handle_price_choice(update, context)
    elif step == 'review':
        handle_review(update, context)
    elif step == 'get_name':
        handle_name_input(update, context)
    elif step == 'get_address':
        handle_address_input(update, context)
    elif step == 'get_date':
        handle_date_input(update, context)
    elif step == 'get_time':
        handle_time_input(update, context)
    elif step == 'dislike_options':
        handle_dislike_options(update, context)
    elif step == 'get_phone':
        handle_get_phone(update, context)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")


def main():
    load_dotenv()
    tg_bot_token = os.getenv('TG_BOT_TOKEN')
    updater = Updater(tg_bot_token)
    dispatcher = updater.dispatcher
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, route_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
