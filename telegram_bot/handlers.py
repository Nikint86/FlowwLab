import os
import sys
import django
from django.conf import settings

# –î–æ–±–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()


import random
import pytz
import re

from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv
from bot.models import Bouquet, Order, ConsultationRequest


def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ."""
    user = update.effective_user
    context.user_data.clear()
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. ‚úÖ\n"
        "–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?"
    )
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(welcome_text, reply_markup=reply_markup)
    context.user_data['step'] = 'consent'


def handle_consent(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"."""
    user_response = update.message.text
    if user_response == "–î–∞":
        context.user_data['consent_given'] = True
        context.user_data['step'] = 'occasion_choice'
        occasions = ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–®–∫–æ–ª–∞", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
        keyboard = [[KeyboardButton(occasion)] for occasion in occasions]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:",
            reply_markup=reply_markup
        )
    elif user_response == "–ù–µ—Ç":
        update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üëã",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


def handle_occasion_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–≤–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞."""
    occasion = update.message.text
    context.user_data['occasion'] = occasion
    
    if occasion == "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥":
        context.user_data['step'] = 'custom_occasion'
        update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–≤–æ–¥?")
    else:
        context.user_data['step'] = 'color_choice'
        colors = Bouquet.objects.values_list('color', flat=True).distinct()
        keyboard = [[KeyboardButton(color)] for color in colors]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–∫–µ—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
            reply_markup=reply_markup
        )


def handle_custom_occasion(update: Update, context: CallbackContext):
    """–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–≤–æ–¥"""
    context.user_data['custom_occasion'] = update.message.text
    context.user_data['step'] = 'color_choice'

    colors = Bouquet.objects.values_list('color',
                                         flat=True).distinct()
    keyboard = [[KeyboardButton(color)] for color in colors]
    reply_markup = ReplyKeyboardMarkup(keyboard,
                                       resize_keyboard=True)

    update.message.reply_text(
        "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–∫–µ—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
        reply_markup=reply_markup
    )


def handle_color_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É."""
    color = update.message.text
    context.user_data['color'] = color
    context.user_data['step'] = 'price_choice'

    prices = list(Bouquet.objects.values_list('price_category',
                                              flat=True).distinct())
    keyboard = [[KeyboardButton(price)] for price in prices]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=reply_markup
    )


def handle_price_choice(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç '–ù—Ä–∞–≤–∏—Ç—Å—è?'"""
    price_category = update.message.text
    color = context.user_data['color']
    bouquet = Bouquet.objects.filter(color=color,
                                     price_category=price_category).order_by('?').first()

    context.user_data['step'] = 'review'

    if not bouquet:
        update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üò¢\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (/start)",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    context.user_data['selected_bouquet'] = bouquet

    caption = (
        f"üíê *{bouquet.title}*\n"
        f"üé® –¶–≤–µ—Ç: {bouquet.color}\n"
        f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n"
        f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n\n"
        f"{bouquet.description}\n\n"
        "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
    )

    with open(bouquet.photo.path, 'rb') as image:
        update.message.reply_photo(
            photo=InputFile(image),
            caption=caption,
            parse_mode="Markdown"
        )
    keyboard = [[KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç")],
                [KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"),
                 KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é")]]
    update.message.reply_text(
        "<b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?</b>\n\n"
        "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard,
                                         resize_keyboard=True),
        parse_mode="HTML"
    )


def handle_review(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "–ù—Ä–∞–≤–∏—Ç—Å—è":
        return handle_order_bouquet(update, context)
    elif text == "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è":
        return handle_show_collection(update, context)
    elif text == "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç":
        return handle_order_bouquet(update, context)
    elif text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        return handle_consultation(update, context)
    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é":
        return handle_show_collection(update, context)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")


def handle_dislike_options(update: Update, context: CallbackContext):
    choice = update.message.text
    if choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç":
        bouquets = list(Bouquet.objects.all())
        if not bouquets:
            update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        bouquet = random.choice(bouquets)
        context.user_data['selected_bouquet'] = bouquet
        context.user_data['step'] = 'review'

        caption = (
            f"üíê *{bouquet.title}*\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
            f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n\n"
            f"{bouquet.description}\n\n"
            "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
        )

        with open(bouquet.photo.path, 'rb') as image:
            update.message.reply_photo(
                photo=InputFile(image),
                caption=caption,
                parse_mode="Markdown"
            )

        keyboard = [[KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è"),
                     KeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]]
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
                                  reply_markup=ReplyKeyboardMarkup(keyboard,
                                                                   resize_keyboard=True))

    elif choice == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        context.user_data['step'] = 'get_consultation_phone'


def handle_order_bouquet(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É - –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç"""
    context.user_data['step'] = 'get_name'
    
    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=ReplyKeyboardRemove()
    )


def handle_show_collection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
    bouquets = list(Bouquet.objects.all())
    if not bouquets:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
        return

    bouquet = random.choice(bouquets)
    context.user_data['selected_bouquet'] = bouquet
    context.user_data['step'] = 'review'

    caption = (
        f"üíê *{bouquet.title}*\n"
        f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
        f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n\n"
        f"{bouquet.description}\n\n"
        "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
    )
    with open(bouquet.photo.path, 'rb') as image:
        update.message.reply_photo(photo=InputFile(image), caption=caption, parse_mode="Markdown")

    keyboard = [[KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç")],
                [KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"),
                KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é")]]
    update.message.reply_text(
        "**–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?**\n\n"
        "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard,
                                         resize_keyboard=True)
    )


def handle_consultation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    context.user_data['step'] = 'get_consultation_phone'
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890:")


def is_valid_phone(phone):
    return re.match(r'^(\+7|8)[0-9]{10}$', phone.replace(" ", "")) is not None


def handle_get_phone_for_order(update: Update, context: CallbackContext):
    phone = update.message.text
    if not is_valid_phone(phone):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890"
            )
        return

    context.user_data['phone'] = phone
    return finalize_order(update, context)


def finalize_order(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫—É—Ä—å–µ—Ä–∞"""
    phone = context.user_data['phone']
    name = context.user_data['name']
    address = context.user_data['address']
    bouquet = context.user_data['selected_bouquet']
    date_str = context.user_data['delivery_date']
    time = context.user_data['delivery_time']

    today = datetime.today()
    if date_str == "–°–µ–≥–æ–¥–Ω—è":
        date_obj = today
    elif date_str == "–ó–∞–≤—Ç—Ä–∞":
        date_obj = today + timedelta(days=1)
    elif date_str == "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
        date_obj = today + timedelta(days=2)
    else:
        date_obj = today

    time_start = time.split("-")[0]
    delivery_dt = datetime.strptime(
        f"{date_obj.strftime('%Y-%m-%d')} {time_start}",
                                    "%Y-%m-%d %H:%M"
                                    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    Order.objects.create(
        name=name,
        address=address,
        phone=phone,
        delivery_time=delivery_dt,
        bouquet=bouquet,
        comment="",
        is_consultation=False,
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    order_summary = (
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üíê –ë—É–∫–µ—Ç: {bouquet.title}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {bouquet.price} —Ä—É–±.\n"
        f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
        f"{bouquet.description}\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {name}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ü•∞ –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä."
    )

    with open(bouquet.photo.path, 'rb') as image:
        update.message.reply_photo(photo=InputFile(image), caption=order_summary)

    update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! üíê",
                              reply_markup=ReplyKeyboardRemove())
    
    notify_courier(context.bot, bouquet, order_summary)

    context.user_data.clear()


def handle_get_phone_for_consultation(update: Update, context: CallbackContext):
    phone = update.message.text
    if not is_valid_phone(phone):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890"
            )
        return
    
    context.user_data['phone'] = phone
    name = context.user_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    username = update.message.from_user.username or ''

    ConsultationRequest.objects.create(
        name=name,
        telegram_username=username,
        phone=phone
    )

    florist_id = os.getenv("FLORIST_CHAT_ID")
    if florist_id:
        context.bot.send_message(
            chat_id=florist_id,
            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
        )

    update.message.reply_text(
        "–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ —É–∂–µ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ üëá"
        )
    return handle_show_collection(update, context)


def handle_get_phone(update: Update, context: CallbackContext):

    phone = update.message.text
    if not re.match(r'^(\+7|8)[0-9]{10}$', phone.replace(" ", "")):
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890 (11 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)")
        return
    context.user_data['phone'] = phone
    name = context.user_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    username = update.message.from_user.username or ''
    
    ConsultationRequest.objects.create(
        name=name,
        telegram_username=username,
        phone=phone
    )

    florist_id = os.getenv("FLORIST_CHAT_ID")
    if florist_id:
        context.bot.send_message(
            chat_id=florist_id,
            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
        )
    update.message.reply_text(
        "–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ üëá"
    )

    # –ü–æ–∫–∞–∂–µ–º –±—É–∫–µ—Ç
    bouquets = list(Bouquet.objects.all())
    if bouquets:
        bouquet = random.choice(bouquets)
        context.user_data['selected_bouquet'] = bouquet
        context.user_data['step'] = 'review'
        caption = (
            f"üíê *{bouquet.title}*\n"
            f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet.composition}\n"
            f"üí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n\n"
            f"{bouquet.description}\n\n"
            "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
        )

        with open(bouquet.photo.path, 'rb') as image:
            update.message.reply_photo(
                photo=InputFile(image),
                caption=caption,
                parse_mode="Markdown"
            )

        keyboard = [[KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è"),
                     KeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]]
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
                                  reply_markup=ReplyKeyboardMarkup(keyboard,
                                                                   resize_keyboard=True))


def handle_name_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û"""
    name = update.message.text
    if len(name.split()) < 2:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)")
        return
    context.user_data['name'] = name
    context.user_data['step'] = 'get_address'
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):"
    )


def handle_address_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞"""
    address = update.message.text
    context.user_data['address'] = address
    context.user_data['step'] = 'get_date'
    keyboard = [
        [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )


def get_delivery_datetime(date_str: str, time_str: str) -> datetime:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ datetime –¥–æ—Å—Ç–∞–≤–∫–∏"""
    today = datetime.today()
    if date_str == "–°–µ–≥–æ–¥–Ω—è":
        date_obj = today
    elif date_str == "–ó–∞–≤—Ç—Ä–∞":
        date_obj = today + timedelta(days=1)
    elif date_str == "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
        date_obj = today + timedelta(days=2)
    else:
        date_obj = today  # fallback, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ

    time_start = time_str.split("-")[0]
    delivery_dt = datetime.strptime(
        f"{date_obj.strftime('%Y-%m-%d')} {time_start}",
        "%Y-%m-%d %H:%M"
    )
    return delivery_dt


def handle_date_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
    user_data_choice = update.message.text
    now = datetime.now(pytz.timezone('Europe/Moscow'))

    if user_data_choice not in ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    context.user_data['delivery_date'] = user_data_choice
    context.user_data['step'] = 'get_time'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    all_slots = [
        ("10:00-12:00", 10),
        ("12:00-14:00", 12),
        ("14:00-16:00", 14),
        ("16:00-18:00", 16)
    ]

    if user_data_choice == "–°–µ–≥–æ–¥–Ω—è":
        current_hour = now.hour
        available_slots = [slot for slot, hour in all_slots if hour > current_hour]
        if not available_slots:
            update.message.reply_text(
                "‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —É–∂–µ –ø—Ä–æ—à–ª–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ó–∞–≤—Ç—Ä–∞")], [KeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")]],
                    resize_keyboard=True
                )
            )
            return
    else:
        available_slots = [slot for slot, _ in all_slots]

    keyboard = [[KeyboardButton(slot)] for slot in available_slots]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )


def handle_time_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–±–æ—Ä—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    time_str = update.message.text
    context.user_data['delivery_time'] = time_str

    date_str = context.user_data.get('delivery_date')
    try:
        delivery_dt = get_delivery_datetime(date_str, time_str)
    except ValueError:
        update.message.reply_text(
            "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        return

    context.user_data['delivery_dt'] = delivery_dt
    context.user_data['step'] = 'get_order_phone'

    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890):",
        reply_markup=ReplyKeyboardRemove()
    )


def notify_courier(bot, bouquet, order_summary):
    courier_id = os.getenv("COURIER_CHAT_ID")
    if not courier_id:
        print("COURIER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    with open(bouquet.photo.path, 'rb') as image:
        bot.send_photo(
            chat_id=courier_id,
            photo=InputFile(image),
            caption=order_summary
        )


def route_message(update: Update, context: CallbackContext):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    step = context.user_data.get('step')
    text = update.message.text

    handlers = {
        'consent': handle_consent,
        'occasion_choice': handle_occasion_choice,
        'custom_occasion': handle_custom_occasion,
        'color_choice': handle_color_choice,
        'price_choice': handle_price_choice,
        'review': handle_review,
        'get_name': handle_name_input,
        'get_address': handle_address_input,
        'get_date': handle_date_input,
        'get_time': handle_time_input,
        'get_consultation_phone': handle_get_phone_for_consultation,
        'get_order_phone': handle_get_phone_for_order,
        'dislike_options': handle_dislike_options,
    }

    handler = handlers.get(step)
    if handler:
        handler(update, context)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")


def main():
    load_dotenv()
    tg_bot_token = os.getenv('TG_BOT_TOKEN')
    updater = Updater(tg_bot_token)
    dispatcher = updater.dispatcher
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, route_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
