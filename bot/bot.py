import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv


def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ."""
    user = update.effective_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. ‚úÖ\n"
        "–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?"
    )
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(welcome_text, reply_markup=reply_markup)


def handle_consent(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"."""
    user_response = update.message.text
    if user_response == "–î–∞":
        context.user_data['consent_given'] = True
        occasions = ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–®–∫–æ–ª–∞", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
        keyboard = [[KeyboardButton(occasion)] for occasion in occasions]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:",
            reply_markup=reply_markup
        )
    elif user_response == "–ù–µ—Ç":
        update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üëã",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


def handle_occasion_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–≤–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞."""
    occasion = update.message.text
    context.user_data['occasion'] = occasion

    if occasion == "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥":
        update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–≤–æ–¥?")
    else:
        colors = ["–ë–µ–ª—ã–π", "–†–æ–∑–æ–≤—ã–π"]
        keyboard = [[KeyboardButton(color)] for color in colors]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–∫–µ—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
            reply_markup=reply_markup
        )


def handle_color_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É."""
    color = update.message.text
    context.user_data['color'] = color

    prices = ["~500", "~1000", "~2000", "–ë–æ–ª—å—à–µ", "–ù–µ –≤–∞–∂–Ω–æ"]
    keyboard = [[KeyboardButton(price)] for price in prices]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=reply_markup
    )


def route_message(update: Update, context: CallbackContext):
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text

    if 'consent_given' not in context.user_data:
        handle_consent(update, context)

    elif text in ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–®–∫–æ–ª–∞", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]:
        handle_occasion_choice(update, context)

    elif text in ["–ë–µ–ª—ã–π", "–†–æ–∑–æ–≤—ã–π"]:
        handle_color_choice(update, context)

    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")


def main():
    load_dotenv()
    tg_bot_token = os.getenv('TG_BOT_TOKEN')
    updater = Updater(tg_bot_token)
    dispatcher = updater.dispatcher
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, route_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
