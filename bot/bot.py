import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv


# –ó–∞–≥–ª—É—à–∫–∞ "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" –±—É–∫–µ—Ç–æ–≤
BOUQUETS_DB = {
    "–ë–µ–ª—ã–π": {
        "~500": {
            "photo": "https://violetflowers.ru/upload/resize_cache/iblock/210/800_800_1445b4302703fbf0bc9433e7bed9bfe3d/210b4d1c9970e1fcdd65812bbac7b7c8.jpeg",
            "name": "–ù–µ–∂–Ω–æ—Å—Ç—å",
            "composition": "5 –±–µ–ª—ã—Ö —Ä–æ–∑, –≥–∏–ø—Å–æ—Ñ–∏–ª–∞",
            "price": "500 —Ä—É–±."
        },
        "~1000": {
            "photo": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRBOg1pSSompNpXp8C0nvbUzFDpNWCoGq_PMQ&s",
            "name": "–°–Ω–µ–∂–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞",
            "composition": "15 –±–µ–ª—ã—Ö —Ä–æ–∑, —ç–≤–∫–∞–ª–∏–ø—Ç",
            "price": "1000 —Ä—É–±."
        }
    },
    "–†–æ–∑–æ–≤—ã–π": {
        "~1000": {
            "photo": "https://www.beauty-flowers-moscow.ru/wp-content/uploads/2017/12/11-rozovyh-pionov-v-rozovoj-upakovke.jpg",
            "name": "–†–æ–∑–æ–≤—ã–µ –º–µ—á—Ç—ã",
            "composition": "11 —Ä–æ–∑–æ–≤—ã—Ö —Ä–æ–∑, –ø–∏–æ–Ω—ã",
            "price": "1000 —Ä—É–±."
        }
    }
}


def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ."""
    user = update.effective_user
    context.user_data.clear()
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. ‚úÖ\n"
        "–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?"
    )
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(welcome_text, reply_markup=reply_markup)
    context.user_data['step'] = 'consent'


def handle_consent(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"."""
    user_response = update.message.text
    if user_response == "–î–∞":
        context.user_data['consent_given'] = True
        context.user_data['step'] = 'occasion_choice'
        occasions = ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–®–∫–æ–ª–∞", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
        keyboard = [[KeyboardButton(occasion)] for occasion in occasions]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–æ–≤–æ–¥:",
            reply_markup=reply_markup
        )
    elif user_response == "–ù–µ—Ç":
        update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üëã",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear() # –º–æ–∂–Ω–æ –∏ –±–µ–∑ —ç—Ç–æ–≥–æ - –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


def handle_occasion_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–≤–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞."""
    occasion = update.message.text
    context.user_data['occasion'] = occasion
    context.user_data['step'] = 'color_choice'

    if occasion == "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥":
        update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–≤–æ–¥?")
    else:
        colors = ["–ë–µ–ª—ã–π", "–†–æ–∑–æ–≤—ã–π"]
        keyboard = [[KeyboardButton(color)] for color in colors]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –±—É–∫–µ—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
            reply_markup=reply_markup
        )


def handle_color_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É."""
    color = update.message.text
    context.user_data['color'] = color
    context.user_data['step'] = 'price_choice'

    prices = ["~500", "~1000", "~2000", "–ë–æ–ª—å—à–µ", "–ù–µ –≤–∞–∂–Ω–æ"]
    keyboard = [[KeyboardButton(price)] for price in prices]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=reply_markup
    )


def handle_price_choice(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç '–ù—Ä–∞–≤–∏—Ç—Å—è?'"""
    price = update.message.text
    color = context.user_data['color']
    bouquet = BOUQUETS_DB.get(color, {}).get(price)

    context.user_data['step'] = 'review'

    if not bouquet:
        update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üò¢\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (/start)",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    decription = (
        f"üíê *{bouquet['name']}*\n"
        f"üé® –¶–≤–µ—Ç: {color}\n"
        f"üí∞ –¶–µ–Ω–∞: {bouquet['price']}\n"
        f"üå∏ –°–æ—Å—Ç–∞–≤: {bouquet['composition']}\n\n"
        "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
    )
    context.user_data['selected_bouquet'] = bouquet
    update.message.reply_photo(
        photo=bouquet['photo'],
        caption=decription,
        parse_mode="Markdown"
    )
    keyboard = [[KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è"), KeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


def handle_review(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç '–ù—Ä–∞–≤–∏—Ç—Å—è?'"""
    response = update.message.text
    bouquet = context.user_data.get('selected_bouquet')

    if not bouquet:
        return start(update, context)

    if response == "–ù—Ä–∞–≤–∏—Ç—Å—è":
        update.message.reply_text(
            "–°—É–ø–µ—Ä! –•–æ—á–µ—à—å:\n"
            "1Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "2Ô∏è‚É£ –£–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n"
            "3Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –±—É–∫–µ—Ç—ã\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['step'] = 'final_options'
        context.user_data['awaiting_action'] = True
    elif response == "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è":
        update.message.reply_text(
            "–•–æ—á–µ—à—å:\n"
            "1Ô∏è‚É£ –ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç (/start)\n"
            "2Ô∏è‚É£ –ü–æ–∑–≤–∞—Ç—å —Ñ–ª–æ—Ä–∏—Å—Ç–∞\n\n"
            "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞",
            reply_markup=ReplyKeyboardRemove()
        )
        # context.user_data['step'] = '?' –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –Ω–æ–≤—ã–π –±—É–∫–µ—Ç
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–ù—Ä–∞–≤–∏—Ç—Å—è' –∏–ª–∏ '–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è'")


def route_message(update: Update, context: CallbackContext):
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π."""
    step = context.user_data.get('step')
    text = update.message.text  # –¥–ª—è –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞

    if step == 'consent':
        handle_consent(update, context)
    elif step == 'occasion_choice':
        handle_occasion_choice(update, context)
    elif step == 'color_choice':
        handle_color_choice(update, context)
    elif step == 'price_choice':
        handle_price_choice(update, context)
    elif step == 'review':
        handle_review(update, context)
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")


def main():
    load_dotenv()
    tg_bot_token = os.getenv('TG_BOT_TOKEN')
    updater = Updater(tg_bot_token)
    dispatcher = updater.dispatcher
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, route_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
